import os
import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.types import WebAppInfo, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from dotenv import load_dotenv

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBAPP_URL = os.getenv("WEBAPP_URL")
ROCKET_URL = os.getenv("ROCKET_URL")

if not BOT_TOKEN or not WEBAPP_URL or not ROCKET_URL:
    raise Exception("‚ùå –ü—Ä–æ–≤–µ—Ä—å .env: TELEGRAM_TOKEN, WEBAPP_URL –∏ ROCKET_URL –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def handle_start(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üöÄ –ò–≥—Ä–∞—Ç—å –≤ –∫–ª–∏–∫–µ—Ä", web_app=WebAppInfo(url=WEBAPP_URL)),
                KeyboardButton(text="üëã –°—Ç–∞—Ä—Ç")
            ]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è "–°—Ç–∞—Ä—Ç"
@dp.message(lambda msg: msg.text == "üëã –°—Ç–∞—Ä—Ç")
async def handle_greeting(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="‚úÖ –î–∞"),
                KeyboardButton(text="‚ùå –ù–µ—Ç")
            ]
        ],
        resize_keyboard=True
    )
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–ª—è —Ç–µ–±—è –∏–≥—Ä—É. –•–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å?", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ "–î–∞"
@dp.message(lambda msg: msg.text == "‚úÖ –î–∞")
async def handle_yes(message: types.Message):
    await message.answer("–ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–∫–µ—Ç—É üöÄ")
    await message.answer(text="–û—Ç–∫—Ä—ã–≤–∞–π –∏–≥—Ä—É:", reply_markup=ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üöÄ –†–∞–∫–µ—Ç–∞", web_app=WebAppInfo(url=ROCKET_URL))]],
        resize_keyboard=True
    ))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ "–ù–µ—Ç"
@dp.message(lambda msg: msg.text == "‚ùå –ù–µ—Ç")
async def handle_no(message: types.Message):
    await message.answer("–•–æ—Ä–æ—à–æ! –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è, –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—à—å üòä")

# –ó–∞–ø—É—Å–∫
async def main():
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
